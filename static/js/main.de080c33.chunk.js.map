{"version":3,"sources":["Data/PlayerListData.js","Tables/PointsOnTransfers.js","Components/SiteFetcher/index.js","Components/SiteRender/index.js","Tables/TableComponents/TableHeaders.js","Tables/TableComponents/TableRows.js","Tables/TableComponents/DisplayTable.js","Tables/TableComponents/TablePlayersCell.js","Tables/TableComponents/TablePlayersRow.js","Tables/TableComponents/TableCellType.js","Tables/PointsTable.js","Data/PageData.js","Components/SiteNavbar/Dropdown.js","Components/SiteNavbar/index.js","Data/PlayerMenus.js","PlayerDetail/PlayerDetailTable.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerListData","PointsOnTransfers","useState","PlayerListDataExample","playerListData","setplayerListData","isLoading","setIsLoading","useEffect","fetch","then","response","json","playerDataFromServer","catch","err","console","log","GameWeeks","matches","map","match","gameweek","playerGameWeeks","sort","a","b","week","game_week_transfers_cost","reduce","player","playersWeek","matchweek","renderLogic","className","totalLost","indexOf","player_name","renderTable","CircularProgress","Table","responsive","SiteFetcher","url","properties","setResponse","isFetching","setIsFetching","isDisplayable","setIsDisplayable","responseJson","error","SiteRender","props","data","IsFetching","component","TableHeaders","GameWeeksLogic","game_weeks","type","PointsTotal","TableRows","AveragesLogic","averages","average","index","typeLogic","toFixed","rows","total_averages","AverageTotals","DisplayTable","title","total","TablePlayersCell","valueLogic","value","rating","table_style","TablePlayersRow","rank","total_rating","total_points","renderTotalLogic","TableCellType","good","bad","PointsTable","TotalsAverage","SortLogic","SiteFetch","PlayeDataExample","FplData","AllOfThePointsScored","AllOfTheAverages","dataType","y","length","x","push","game_week_points","points_total","team_value","Math","floor","bench_points","i","slice","reducer","item","PlayerGameWeeks","TotalsLogic","BenchTotalsLogic","PlayersWeek","ValueLogic","BenchLogic","ratingLogic","TotalRatingLogic","TableLogic","PageData","content","Dropdown","displayedMenus","dropdown_menus","menu","DropdownItem","to","UncontrolledDropdown","DropdownToggle","nav","caret","head_menu","DropdownMenu","inNavbar","SiteNavbar","displayNavs","page","pageLink","split","join","NavItem","playersList","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","PlayerMenus","PlayerDetailTable","PlayerData","menuHeadings","gameWeeks","game_week_transfers","averageTeamValue","totalTransfers","averageTransfers","totalTransferCosts","averageTransfersCosts","totalBenchPoints","averageBenchPoints","displayAllChips","chips","chip","chip_name","chip_date","chip_matchday","App","displayPages","path","displayPlayerPages","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de080c33.chunk.js","sourcesContent":["const PlayerListData = [\n    {\n        \"player_name\": \"\",\n        \"player_id\": \"\",\n        \"points_total\": \"\",\n        \"transfers_total\": \"\",\n        \"current_gameweek\": \"\",\n        \"chips\": [\n            {\n                \"chip_name\": \"\",\n                \"chip_date\": \"\",\n                \"chip_matchday\": \"\"\n            }\n        ],\n        \"matches\": [\n            {\n                \"gameweek\": \"\",\n                \"game_week_points\": \"\",\n                \"points_total\": \"\",\n                \"team_value\": \"\",\n                \"game_week_transfers\": \"\",\n                \"game_week_transfers_cost\": \"\",\n                \"bench_points\": \"\"\n            }\n        ]\n    }\n]\n\nexport default PlayerListData","import React, { useState , useEffect } from 'react'\n// Data\nimport PlayerListDataExample from 'Data/PlayerListData'\n// CSS\nimport CircularProgress from '@material-ui/core/CircularProgress'\n// Components\nimport Table from 'react-bootstrap/Table'\n\nconst PointsOnTransfers = () => {\n\n    const [playerListData, setplayerListData] = useState(PlayerListDataExample)\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n        fetch(\"https://kachiis-rest.herokuapp.com/api/fpl_players_refresh\")\n        .then(response => response.json())\n        .then(playerDataFromServer => {\n            setplayerListData(playerDataFromServer)\n            setIsLoading(false)\n        })\n        .catch(err => console.log(err))\n    }, [])\n    \n    const GameWeeks = playerListData[0].matches.map((match) => <th>GW{match.gameweek}</th>)\n\n    const sortTeamsByTransferPoints = playerListData.sort((a, b) => \n        b.matches.map((week) => week.game_week_transfers_cost).reduce(\n        (a,b) => a + b) - a.matches.map((week) => week.game_week_transfers_cost).reduce((a,b) => a + b)\n    )\n\n    const playerGameWeeks = sortTeamsByTransferPoints.map((player) => {\n\n        const playersWeek = player.matches.map((matchweek) => {\n\n            const renderLogic = ( matchweek.game_week_transfers_cost > 0 ? \n                    (matchweek.game_week_transfers_cost === 4 ? \"yellow\": \"red\"): \"none\" \n                )\n\n            return (\n                <td className={`transfer-${renderLogic}`}>\n                    {matchweek.game_week_transfers_cost}\n                </td>\n            )\n        })\n\n        const totalLost = player.matches.map((matchweek) =>  matchweek.game_week_transfers_cost).reduce((a,b) => a+b)\n\n        return (\n            <tr>\n                <td className=\"player-rank rank-name\">{playerListData.indexOf(player) + 1}</td>\n                <td className=\"player-name rank-name\">{player.player_name}</td>\n                {playersWeek}\n                <td>{totalLost}</td>\n            </tr>\n        )\n    })\n\n    const renderTable = isLoading ? <CircularProgress /> : (\n        <Table responsive>\n            <tbody>\n                <tr>\n                    <th className=\"player-rank rank-name\">Rank</th>\n                    <th className=\"player-name rank-name\">Players</th>\n                    {GameWeeks}\n                    <th>Total</th>\n                </tr>\n                {playerGameWeeks}\n            </tbody>\n        </Table>\n    )\n\n    return (\n        <div className=\"table-container\">\n            <h2>Points Spent on Transfers</h2>\n            {renderTable}\n        </div>\n    )\n\n}\n\nexport default PointsOnTransfers","import { useEffect, useState } from 'react'\n\nconst SiteFetcher = (url, properties) => {\n    \n    const [response, setResponse] = useState(properties);\n    const [isFetching, setIsFetching] = useState(true)\n    const [isDisplayable, setIsDisplayable] = useState(false)\n  \n    useEffect(() => {\n      fetch(url)\n        .then(response => response.json())\n        .then((responseJson) => {\n            setIsDisplayable(true)\n            setIsFetching(false)\n            setResponse(responseJson);\n        })\n        .catch((error) => {\n            setIsFetching(false)\n            console.log(error)\n        })\n    }, [url])\n  \n    return {\n      response,\n      isFetching,\n      isDisplayable\n    }\n};\n\nexport default SiteFetcher","import React from 'react'\n// Components\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\n\nconst SiteRender = (props) => {\n\n    const renderLogic = (props.data.IsFetching)?(\n        <ReportProblemIcon />\n      ):(\n          (props.data.isDisplayable) ? (\n            props.component\n          ):(\n              <div>\n                  <h1>Loading Please Wait...</h1>\n                  <CircularProgress />\n              </div>\n          )\n        )\n\n    return renderLogic\n}\n\nexport default SiteRender\n","import React from 'react'\n\nconst TableHeaders = (props) =>  {\n\n    const GameWeeksLogic = props.game_weeks.map((match) => \n        <th>GW{match.gameweek}</th>\n    )\n\n    // if it isn't points_total return a total header\n    const PointsTotal = () => {\n        if (props.type !== \"points_total\" && props.type !== \"team_value\") {\n            return <th>Total</th>\n        }\n    }\n\n    return (\n        <tr>\n            <th className=\"player-rank rank-name\">Rank</th>\n            <th className=\"player-name rank-name\">Players</th>\n            {GameWeeksLogic}\n            {PointsTotal()}\n        </tr>\n    )\n}\n\nexport default TableHeaders","import React from 'react'\n\nconst TableRows = (props) => {\n\n    // if it isn't points_total return a total some \n    const AverageTotals = () => {\n        if (props.type !== \"points_total\" && props.type !== \"team_value\") {\n            return <td>{props.total_averages}</td>\n        }\n    }\n\n    const AveragesLogic = props.averages.map((average, index) => {\n\n        const typeLogic = props.type === \"team_value\" ? \n            `${(average /10).toFixed(1)}M`\n            :\n            average.toFixed(1)\n        \n        return (\n            <td key={index}>\n                {typeLogic}\n            </td>\n        )\n    })\n\n    return (\n        <>\n            {props.rows}\n            <tr>\n                <td className=\"player-rank rank-name\">-</td>\n                <td className=\"player-name rank-name\">Average</td>\n                {AveragesLogic}\n                {AverageTotals()}\n            </tr>\n\n        </>\n    )\n}\n\nexport default TableRows","import React from 'react'\n// COMPONENTS\nimport Table from 'react-bootstrap/Table'\n// COMPONENTS\nimport TableHeaders from './TableHeaders'\nimport TableRows from './TableRows'\n\nconst DisplayTable = (props) => (\n    <>\n        <h2>{props.title}</h2>\n        <Table responsive>\n            <tbody>\n                <TableHeaders \n                    total={props.total} \n                    game_weeks={props.data[0].matches}\n                    type={props.type}\n                />\n                <TableRows \n                    type={props.type}\n                    rows={props.rows}\n                    averages={props.averages}\n                    total_averages={props.total_averages}\n                />\n            </tbody>\n        </Table>\n    </>\n)\n\nexport default DisplayTable","import React from 'react'\n\nconst TablePlayersCell = (props) => {\n    \n    const valueLogic = props.type === \"team_value\" ? `${(props.value /10).toFixed(1)}M` : props.value\n\n    return (\n\n        <td className={`${props.rating}-week ${props.table_style}`}>\n            {valueLogic}\n        </td>\n    )\n}\nexport default TablePlayersCell","import React from 'react'\n// COMPONENTS\nimport TablePlayersCell from './TablePlayersCell'\n\nconst TablePlayersRow = (props) => {\n\n    const renderTotalLogic = () => {\n        if (props.type !== \"points_total\" && props.type !== \"team_value\") {\n            return (\n                <TablePlayersCell\n                    rating={props.total_rating}\n                    value={props.total_points}\n                />\n            )\n        }\n    }\n    \n    return (\n        <tr>\n            <td>{props.rank}</td>\n            <td>{props.player_name}</td>\n            {props.game_weeks}\n            {renderTotalLogic()}\n        </tr>\n    )\n}\n\nexport default TablePlayersRow\n","const TableCellType = (good, bad) => good >= bad ? \"good\" : \"bad\"\n\nexport default TableCellType","import React from 'react'\n// Data\nimport PlayeDataExample from 'Data/PlayerListData'\nimport SiteFetcher from 'Components/SiteFetcher'\nimport SiteRender from 'Components/SiteRender'\n// Components\nimport DisplayTable from './TableComponents/DisplayTable'\nimport TablePlayersRow from './TableComponents/TablePlayersRow'\nimport TablePlayersCell from './TableComponents/TablePlayersCell'\nimport TableCellType from './TableComponents/TableCellType'\n\nconst FplLink = \"https://kachiis-rest.herokuapp.com/api/fpl_players_refresh\"\n\nconst PointsTable = (props) => {\n\n    // FPL FETCHING DATA\n    const SiteFetch = SiteFetcher(FplLink, PlayeDataExample)\n    //FPL Data\n    const FplData = SiteFetch.response\n\n    //// SET UPS ////\n    // Array of all points score begins as empty\n    const AllOfThePointsScored = []\n    const AllOfTheAverages = []\n    \n    // Type Logic\n    const dataType = props.type\n    \n    // For loop logic that pushes points scored of each player\n    // Matches.length is detirmined by number of game weeks \n    // FplData.length is detirmined by the number of Players\n    for (let y=0; y < FplData[0].matches.length; y++) {\n        for (let x=0; x < FplData.length; x++) {\n            // Points are detirmed by which dataType is passed through table\n            // CHANGE THIS FOR OTHER TABLES \n            switch (dataType) {\n                case \"weekly_points\":\n                    // Pushes points scored by each player each game week\n                    AllOfThePointsScored.push(FplData[x].matches[y].game_week_points);\n                    break;\n                case \"points_total\":  \n                    // Pushes points total of each player, each week\n                    AllOfThePointsScored.push(FplData[x].matches[y].points_total);\n                    break;\n                case \"team_value\":\n                    // Pushes team value of each player each game week\n                    AllOfThePointsScored.push(FplData[x].matches[y].team_value);\n                    break;\n                case \"bench_points\":\n                    // Pushes bench points of each player each game week\n                    AllOfThePointsScored.push(Math.floor(FplData[x].matches[y].bench_points))\n                    break;\n                default:\n                    // // Return game week points as default\n                    // AllOfThePointsScored.push(FplData[x].matches[y].game_week_points);\n            }\n        }\n    }\n    \n    // Average points detirmined by number of players and gameweek\n    for (let i=0; i < AllOfThePointsScored.length; i += FplData.length) {\n        // renders the average of each gameweek and pushes to the array\n        AllOfTheAverages.push(\n            AllOfThePointsScored.slice(i, i + FplData.length)\n            .reduce((a, b) => a + b) \n            / FplData.length\n        )\n    }\n\n    // Total Average  and Sort will be based on value types\n    var TotalsAverage, SortLogic\n\n    // Total of all average of all players\n    switch (dataType) {\n\n        case \"weekly_points\":\n            // Returns the Average Points Total\n            TotalsAverage = FplData.map(player => \n                player.points_total\n            ).reduce((a, b) => a + b) / FplData.length\n            // Already sorted according to points so can leave as default\n            SortLogic = FplData\n            break;\n        case \"bench_points\":\n            // Returns the Average Bench Points Total\n            TotalsAverage = FplData.map(player => player.matches\n                    .map(match => match.bench_points)\n                    .reduce((a, b) => a + b))\n                    .reduce((a, b) => a + b) \n                    / FplData.length\n            // sort by who has the most bench points in total\n            SortLogic = FplData.sort((a, b) => {\n\n                const reducer = (item) => item.matches.map((week) => \n                        week.bench_points\n                    )\n                    .reduce((a,b) => a + b)\n\n                return reducer(a) - reducer(b)\n            }\n            )\n            break\n        case \"team_value\":\n            // sort by highest team value \n            SortLogic = FplData.sort((a, b) => \n                b.matches[b.matches.length - 1].team_value \n                - \n                a.matches[a.matches.length - 1].team_value\n            )\n            break\n        default:\n            // default \n            SortLogic = FplData\n    }\n\n    // Map each player and returns their points per gameweek\n    const PlayerGameWeeks = SortLogic.map((player, index) => {\n\n        // Returns each game week of the player as a Table cell\n        const PlayersWeek = player.matches.map((matchweek, index) => {\n\n            // Value and Bench detirmines the following varriables\n            // Intitally set as empty\n            var ValueLogic, BenchLogic\n            \n            // Detirmines type of cell\n            switch (dataType) {\n                case \"points_total\":\n                    // returns points total end of matchweek\n                    ValueLogic = matchweek.points_total\n                    break;\n                case \"weekly_points\":\n                    // returns points scored that of matchweek\n                    ValueLogic = matchweek.game_week_points\n                    break\n                case \"team_value\":\n                    // returns team value by the end of matchweek\n                    ValueLogic = matchweek.team_value\n                    break\n                case \"bench_points\":\n                    // returns points scored by players on your bench\n                    ValueLogic = matchweek.bench_points\n                    // If value is higher that average will return bad\n                    // the less points score by bench players the better\n                    BenchLogic = ValueLogic > AllOfTheAverages[player.matches.indexOf(matchweek)] ? \n                        \"bad\" : \"good\"\n                    break\n                default:\n                    // default is blank\n            }\n\n            // Rating detirmines color of the cell based comparrison to average \n            const ratingLogic = dataType === \"bench_points\" ? \n                // Logic reversed for bench points\n                BenchLogic\n                :\n                // Returns green or red cell depending matchweek point type's comparrison to average\n                TableCellType (ValueLogic, AllOfTheAverages[player.matches.indexOf(matchweek)])\n            \n            // Returns cell and color of cell based on weekly performance and type\n            return (\n                <TablePlayersCell\n                    key={index}\n                    type={dataType}\n                    rating={ratingLogic}\n                    value={ValueLogic}\n                />\n            )\n        })\n        \n        // Total Logic detirmines total of value across the season\n        // Intitally set as empty\n        var TotalsLogic, BenchTotalsLogic\n\n        // Switch will only active for bench points and weekly points\n        switch(dataType) {\n            case \"bench_points\":\n                // Gets players total number of bench points\n                TotalsLogic = player.matches.map((matchweek) => matchweek.bench_points)\n                    .reduce((a,b) => a + b)\n                // If value is higher that average will return bad\n                // the less points score by bench players the better\n                BenchTotalsLogic = TotalsLogic > TotalsAverage ? \n                    \"bad\" : \"good\"\n                break;\n            case \"weekly_points\":\n                // Gets players total number of points\n                TotalsLogic = player.points_total\n                break\n            default:\n                // default is blank\n        }\n\n        // If total of current player is over the average, returns \"good\" or else it returns bad\n        const TotalRatingLogic = dataType === \"bench_points\" ?\n            // Logic reversed for bench points\n            BenchTotalsLogic\n            :\n            // Returns green or red cell total in comparrison to average\n            TableCellType(TotalsLogic, TotalsAverage)\n        \n        return (\n            <TablePlayersRow\n                key={index}\n                type={props.type}\n                rank={FplData.indexOf(player) + 1}\n                player_name={player.player_name}\n                game_weeks={PlayersWeek}\n                total_rating={TotalRatingLogic}\n                total_points={TotalsLogic}\n            />\n        )\n    })\n    \n    const TableLogic = (\n        <DisplayTable\n            title={props.title}\n            data={FplData}\n            type={props.type}\n            rows={PlayerGameWeeks}\n            averages={AllOfTheAverages}\n            total_averages={TotalsAverage}\n        />\n    )\n\n    return (\n        <div className=\"table-container\">\n            <SiteRender data={SiteFetch} component={TableLogic} />\n        </div>\n    )\n\n}\n\nexport default PointsTable","import React from 'react'\n// Data\n// Tables\n// import TeamValueTable from 'Tables/TeamValueTable'\n// import PointsOnBenchTable from 'Tables/PointsOnBenchTable'\nimport PointsOnTransfers from 'Tables/PointsOnTransfers'\nimport PointsTable from 'Tables/PointsTable'\n\nconst PageData = [\n    {\n        title: \"Weekly Totals\",\n        content: <PointsTable type=\"points_total\" title=\"Weekly Totals\"/>\n    },\n    {\n        title: \"Team value\",\n        content: <PointsTable type=\"team_value\" title=\"Team Value\" />\n    },\n    {\n        title: \"Bench points\",\n        content: <PointsTable type=\"bench_points\" title=\"Bench Points\" />\n    },\n    {\n        title: \"Points on transfers\",\n        content: <PointsOnTransfers />\n    }\n]\n\n\nexport default PageData","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\n\n\nconst Dropdown = (props) => {\n\n    const Menus = props.dropdown_menus\n\n    const displayedMenus = Menus.map((menu, index) => (\n        <DropdownItem className=\"nav-dropdown-menu-link\" key={index}>\n            <Link to={`/player/${menu}`} className=\"nav-dropdown-menu-link\">\n                {menu}\n            </Link>\n        </DropdownItem>\n    ))\n\n    return (\n        <UncontrolledDropdown>\n            <DropdownToggle nav caret className=\"nav-links\">\n                {props.head_menu}\n            </DropdownToggle>\n            <DropdownMenu inNavbar nav className=\"nav-dropdown-menu\">\n                {displayedMenus}\n            </DropdownMenu>\n        </UncontrolledDropdown>\n    )\n}\n\nexport default Dropdown","import React, { useState, useEffect } from 'react';\nimport { \n    Collapse, \n    Navbar, \n    NavbarToggler, \n    NavbarBrand, \n    Nav, \n    NavItem\n} from 'reactstrap'\nimport PageData from 'Data/PageData';\nimport Dropdown from './Dropdown';\nimport './navbar.css'\nimport {Link} from 'react-router-dom'\nimport PlayerListData from 'Data/PlayerListData';\n\nconst SiteNavbar = (props) => {\n\n    const [playerListData, setplayerListData] = useState(PlayerListData)\n\n    const displayNavs = PageData.map((page, index) => {\n\n        const pageLink = page.title.split(\" \").join(\"-\")\n\n        return (\n            <NavItem key={index}>\n                <Link to={`/fpl_app/${pageLink}`} className=\"nav-links\">\n                    {page.title}\n                </Link>\n            </NavItem>\n        )\n    })\n\n    useEffect(() => {\n        fetch(\"https://kachiis-rest.herokuapp.com/api/fpl_players_refresh\")\n        .then(response => response.json())\n        .then(playerDataFromServer => {\n            setplayerListData(playerDataFromServer)\n        })\n        .catch(err => console.log(err))\n    }, [])\n    \n    const playersList = playerListData.map((player) => player.player_name)\n    \n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n    \n    return (\n        <Navbar color=\"dark\" dark expand=\"md\" className=\"nav-background\">\n            <NavbarBrand href=\"/fpl_app\">Fantasy Premier League Stats</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    {displayNavs}\n                </Nav>\n                <Dropdown head_menu=\"players\" dropdown_menus={playersList}/>\n            </Collapse>\n        </Navbar>\n    );\n}\n\nexport default SiteNavbar;","const PlayerMenus = [\n    \"GW\",\n    \"GW Points\",\n    \"Total\",\n    \"Team value\",\n    \"Transfers\",\n    \"Transfer Cost\",\n    \"Bench Points\",\n]\n\nexport default PlayerMenus","import React from 'react'\n// COMPONENTS\nimport Table from 'react-bootstrap/Table'\nimport PlayerMenus from 'Data/PlayerMenus'\n\nconst PlayerDetailTable = (props) => {\n\n    const PlayerData = props.data\n\n    const menuHeadings = PlayerMenus.map((menu) => <th>{menu}</th>)\n\n    const gameWeeks = PlayerData.matches.map((week) => {\n\n        return (\n            <tr>\n                <td>{week.gameweek}</td>\n                <td>{week.game_week_points}</td>\n                <td>{week.points_total}</td>\n                <td>£{week.team_value / 10}M</td>\n                <td>{week.game_week_transfers}</td>\n                <td>{week.game_week_transfers_cost}</td>\n                <td>{week.bench_points}</td>\n            </tr>\n        )\n    })\n\n\n\n    const averageTeamValue = (PlayerData.matches.map(\n        player => player.team_value /10\n        ).reduce(\n            (a,b) => a + b\n        ) / PlayerData.matches.length\n    ).toFixed(2)\n\n    // Transfers\n    const totalTransfers = (PlayerData.matches.map(\n        player => player.game_week_transfers\n        ).reduce(\n            (a,b) => a + b\n        )\n    )\n\n    const averageTransfers = (totalTransfers / PlayerData.matches.length).toFixed(1)\n\n    // Transfer Costs\n    const totalTransferCosts = (PlayerData.matches.map(\n        player => player.game_week_transfers_cost\n        ).reduce(\n            (a,b) => a + b\n        )\n    )\n\n    const averageTransfersCosts = (totalTransferCosts / PlayerData.matches.length).toFixed(1)\n\n    // Bench Points\n    const totalBenchPoints = (PlayerData.matches.map(\n        player => player.bench_points\n        ).reduce(\n            (a,b) => a + b\n        )\n    )\n\n    const averageBenchPoints = (totalBenchPoints / PlayerData.matches.length).toFixed(2)\n\n    // Chips Played\n    const displayAllChips = PlayerData.chips.map((chip, index) => (\n\n            <tr key={index}>\n                <td>{chip.chip_name}</td>\n                <td>{chip.chip_date}</td>\n                <td>{chip.chip_matchday}</td>\n            </tr>\n        )\n    )\n\n    return (\n        <>\n        <div className=\"table-container\">\n            <h1>{PlayerData.player_name}</h1>\n            <Table responsive>\n                <tbody>\n                    <tr>\n                        {menuHeadings}\n                    </tr>\n                    {gameWeeks}\n                    <tr>\n                        <td>Averages | Totals</td>\n                        <td>{(PlayerData.points_total/PlayerData.matches.length).toFixed(1)}</td>\n                        <td>{PlayerData.points_total}</td>\n                        <td>£{averageTeamValue}M</td>\n                        <td>\n                            <b>AVG:</b> {averageTransfers} | <b>TOTAL:</b> {totalTransfers}\n                        </td>\n                        <td>\n                            <b>AVG:</b> {averageTransfersCosts} | <b>TOTAL:</b> {totalTransferCosts} \n                        </td>\n                        <td>\n                            <b>AVG:</b> {averageBenchPoints} | <b>TOTAL:</b> {totalBenchPoints} \n                        </td>\n                    </tr>\n                </tbody>\n            </Table>\n        </div>\n        <div className=\"second-table-container\">\n            <h1>Chips Played</h1>\n            <Table responsive>\n                <tbody>\n                    <tr>\n                        <th>Game Week</th>\n                        <th>Chip Played</th>\n                        <th>Date</th>\n                    </tr>\n                    {displayAllChips}\n                </tbody>\n            </Table>\n        </div>\n        </>\n    )\n\n}\n\nexport default PlayerDetailTable","import React, { useEffect, useState } from 'react'\n// CSS\nimport './App.css';\nimport './table.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'antd/dist/antd.css';\n// Components\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport SiteNavbar from './Components/SiteNavbar'\nimport PointsTable from './Tables/PointsTable';\n// Data\nimport PageData from 'Data/PageData';\nimport PlayerListData from 'Data/PlayerListData'\nimport PlayerDetailTable from './PlayerDetail/PlayerDetailTable';\n\n\nconst App = () => {\n\n  const [playerListData, setplayerListData] = useState(PlayerListData)\n\n  useEffect(() => {\n    fetch(\"https://kachiis-rest.herokuapp.com/api/fpl_players/\")\n    .then(response => response.json())\n    .then(playerDataFromServer => {\n          setplayerListData(playerDataFromServer)\n        })\n        .catch(err => console.log(err))\n    },[])\n  \n  const displayPages = PageData.map((page, index) => {\n    const pageLink = page.title.split(\" \").join(\"-\")\n    return (\n      <Route path={`/fpl_app/${pageLink}`} key={index}>\n        {page.content}\n      </Route>\n    )\n  })\n\n  const displayPlayerPages = playerListData.map((player, index) => (\n      <Route path={`/player/${player.player_name}`} key={index}>\n        <PlayerDetailTable data={player}/>\n      </Route>\n  ))\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <SiteNavbar />\n        <main>\n          <Switch>\n            {displayPages}\n            {displayPlayerPages}\n            <Route path=\"/fpl_app\">\n              <PointsTable title=\"Weekly Points\" type=\"weekly_points\" />\n            </Route>\n          </Switch>\n        </main>\n      </BrowserRouter>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}