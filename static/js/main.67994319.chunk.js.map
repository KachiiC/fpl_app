{"version":3,"sources":["Data/PlayerListData.js","Components/SiteFetcher/index.js","Components/SiteRender/index.js","Tables/TableComponents/TableHeaders.js","Tables/TableComponents/TableRows.js","Tables/TableComponents/DisplayTable.js","Tables/TableComponents/TablePlayersCell.js","Tables/TableComponents/TablePlayersRow.js","Tables/TableComponents/TableCellType.js","Tables/TableTools/SiteReducer.js","Tables/PointsTable.js","Data/PageData.js","Components/SiteNavbar/Dropdown.js","Components/SiteNavbar/index.js","Components/AntdTabs/index.js","Tables/TableTools/SiteLabelRender.js","Components/MaterialUiTable/TableContents/TableHeadings.js","Components/MaterialUiTable/TableContents/TableCollapsableRow.js","Components/MaterialUiTable/TableContents/TableSingleRow.js","Components/MaterialUiTable/TableContents/TableContents.js","Components/MaterialUiTable/index.js","Components/AntdCard/index.js","PlayerDetail/DetailTables/DetailTables.js","PlayerDetail/DetailTables/SummaryTable.js","PlayerDetail/DetailTables/ChipTables.js","PlayerDetail/index.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerListData","SiteFetcher","url","properties","useState","response","setResponse","isFetching","setIsFetching","isDisplayable","setIsDisplayable","useEffect","fetch","then","json","responseJson","catch","error","console","log","SiteRender","props","data","IsFetching","component","CircularProgress","TableHeaders","GameWeeksLogic","game_weeks","map","match","gameweek","type","PointsTotal","TableRows","AveragesLogic","averages","average","index","typeLogic","toFixed","rows","total_averages","AverageTotals","DisplayTable","title","Table","responsive","total","matches","TablePlayersCell","valueLogic","value","className","rating","table_style","TablePlayersRow","rank","player_name","total_rating","total_points","renderTotalLogic","TableCellType","good","bad","SiteReducer","array","reduce","a","b","PointsTable","TotalsAverage","SortLogic","SiteFetch","PlayeDataExample","FplData","AllOfThePointsScored","AllOfTheAverages","y","length","x","MatchesData","push","game_week_points","points_total","team_value","Math","floor","bench_points","game_week_transfers_cost","i","slice","player","sort","reducer","item","week","valueRender","WeeksReducer","PlayerGameWeeks","TotalsLogic","TotalsRatingLogic","PlayersWeek","matchweek","ValueLogic","RatingTypeLogic","GameweekAverage","indexOf","RatingLogic","TotalRatingLogic","TableLogic","PageData","content","Dropdown","displayedMenus","dropdown_menus","menu","DropdownItem","to","UncontrolledDropdown","DropdownToggle","nav","caret","head_menu","DropdownMenu","inNavbar","SiteNavbar","playerListData","setplayerListData","displayNavs","page","pageLink","split","join","NavItem","playerDataFromServer","err","playersList","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","TabPane","Tabs","AntdTabs","displayTabs","tab","size","centered","SiteLabelRender","toUpperCase","TableHeadings","renderHeadings","Object","keys","filter","heading","headingLogic","TableCell","align","TableHead","TableRow","CollapseSectionDropdown","style","paddingBottom","paddingTop","colSpan","in","open","timeout","unmountOnExit","TableSingleRow","rowContent","row","setOpen","openLogic","displayedTableCells","attribute","arrowLogic","IconButton","aria-label","dropDownLogic","TableCollapsableRow","TableContentRow","renderDataList","TableBody","MaterialUITable","TableContainer","Paper","TableContents","AntdCard","Meta","Card","spanLogic","span","widthLogic","width","description","DetailTables","tableData","displayedContent","card","MaterialUiTable","SumamryTable","summaryHeadings","player_id","total_transfers","transfers_total","displayDecription","label","labelName","labelDescription","points_on_transfers","current_gameweek","last_gameweek_points","ChipTables","displayChips","chip","descriptionLogic","chip_matchday","chip_date","chip_name","filteredCards","summary_card","PlayerDetail","pageContent","chips","team_name","App","displayPages","path","displayPlayerPages","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67994319.chunk.js","sourcesContent":["const PlayerListData = [\n    {\n        \"player_name\": \"\",\n        \"player_id\": \"\",\n        \"points_total\": \"\",\n        \"transfers_total\": \"\",\n        \"current_gameweek\": \"\",\n        \"chips\": [\n            {\n                \"chip_name\": \"\",\n                \"chip_date\": \"\",\n                \"chip_matchday\": \"\"\n            }\n        ],\n        \"matches\": [\n            {\n                \"gameweek\": \"\",\n                \"game_week_points\": \"\",\n                \"points_total\": \"\",\n                \"team_value\": \"\",\n                \"game_week_transfers\": \"\",\n                \"game_week_transfers_cost\": \"\",\n                \"bench_points\": \"\"\n            }\n        ]\n    }\n]\n\nexport default PlayerListData","import { useEffect, useState } from 'react'\n\nconst SiteFetcher = (url, properties) => {\n    \n    const [response, setResponse] = useState(properties);\n    const [isFetching, setIsFetching] = useState(true)\n    const [isDisplayable, setIsDisplayable] = useState(false)\n  \n    useEffect(() => {\n      fetch(url)\n        .then(response => response.json())\n        .then((responseJson) => {\n            setIsDisplayable(true)\n            setIsFetching(false)\n            setResponse(responseJson);\n        })\n        .catch((error) => {\n            setIsFetching(false)\n            console.log(error)\n        })\n    }, [url])\n  \n    return {\n      response,\n      isFetching,\n      isDisplayable\n    }\n};\n\nexport default SiteFetcher","import React from 'react'\n// Components\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\n\nconst SiteRender = (props) => {\n\n    const renderLogic = (props.data.IsFetching)?(\n        <ReportProblemIcon />\n      ):(\n          (props.data.isDisplayable) ? (\n            props.component\n          ):(\n              <div>\n                  <h1>Loading Please Wait...</h1>\n                  <CircularProgress />\n              </div>\n          )\n        )\n\n    return renderLogic\n}\n\nexport default SiteRender\n","import React from 'react'\n\nconst TableHeaders = (props) =>  {\n\n    const GameWeeksLogic = props.game_weeks.map((match) => \n        <th>GW{match.gameweek}</th>\n    )\n\n    // if it isn't points_total return a total header\n    const PointsTotal = () => {\n        if (props.type !== \"points_total\" && props.type !== \"team_value\") {\n            return <th>Total</th>\n        }\n    }\n\n    return (\n        <tr>\n            <th>Rank</th>\n            <th>Players</th>\n            {GameWeeksLogic}\n            {PointsTotal()}\n        </tr>\n    )\n}\n\nexport default TableHeaders","import React from 'react'\n\nconst TableRows = (props) => {\n\n    // if it isn't points_total return a total some \n    const AverageTotals = () => {\n        if (props.type !== \"points_total\" && props.type !== \"team_value\") {\n            return <td>{props.total_averages}</td>\n        }\n    }\n\n    const AveragesLogic = props.averages.map((average, index) => {\n\n        const typeLogic = props.type === \"team_value\" ? \n            `${(average /10).toFixed(1)}M`\n            :\n            average.toFixed(1)\n        \n        return (\n            <td key={index}>\n                {typeLogic}\n            </td>\n        )\n    })\n\n    return (\n        <>\n            {props.rows}\n            <tr>\n                <td/>\n                <td>Average</td>\n                {AveragesLogic}\n                {AverageTotals()}\n            </tr>\n\n        </>\n    )\n}\n\nexport default TableRows","import React from 'react'\n// COMPONENTS\nimport Table from 'react-bootstrap/Table'\n// COMPONENTS\nimport TableHeaders from './TableHeaders'\nimport TableRows from './TableRows'\n\nconst DisplayTable = (props) => (\n    <>\n        <h2>{props.title}</h2>\n        <Table responsive>\n            <tbody>\n                <TableHeaders \n                    total={props.total} \n                    game_weeks={props.data[0].matches}\n                    type={props.type}\n                />\n                <TableRows \n                    type={props.type}\n                    rows={props.rows}\n                    averages={props.averages}\n                    total_averages={props.total_averages}\n                />\n            </tbody>\n        </Table>\n    </>\n)\n\nexport default DisplayTable","import React from 'react'\n\nconst TablePlayersCell = (props) => {\n    \n    const valueLogic = props.type === \"team_value\" ? `${(props.value /10).toFixed(1)}M` : props.value\n\n    return (\n\n        <td className={`${props.rating}-week ${props.table_style}`}>\n            {valueLogic}\n        </td>\n    )\n}\nexport default TablePlayersCell","import React from 'react'\n// COMPONENTS\nimport TablePlayersCell from './TablePlayersCell'\n\nconst TablePlayersRow = (props) => {\n\n    const renderTotalLogic = () => {\n        if (props.type !== \"points_total\" && props.type !== \"team_value\") {\n            return (\n                <TablePlayersCell\n                    rating={props.total_rating}\n                    value={props.total_points}\n                />\n            )\n        }\n    }\n    \n    return (\n        <tr>\n            <td>{props.rank}</td>\n            <td>{props.player_name}</td>\n            {props.game_weeks}\n            {renderTotalLogic()}\n        </tr>\n    )\n}\n\nexport default TablePlayersRow\n","const TableCellType = (good, bad) => good >= bad ? \"good\" : \"bad\"\n\nexport default TableCellType","const SiteReducer = (array) => array.reduce((a,b) => a + b)\n\nexport default SiteReducer","import React from 'react'\n// Data\nimport PlayeDataExample from 'Data/PlayerListData'\nimport SiteFetcher from 'Components/SiteFetcher'\nimport SiteRender from 'Components/SiteRender'\n// Components\nimport DisplayTable from './TableComponents/DisplayTable'\nimport TablePlayersRow from './TableComponents/TablePlayersRow'\nimport TablePlayersCell from './TableComponents/TablePlayersCell'\nimport TableCellType from './TableComponents/TableCellType'\nimport SiteReducer from './TableTools/SiteReducer'\n\nconst FplLink = \"https://kachiis-rest.herokuapp.com/api/fpl_players_refresh\"\n\nconst PointsTable = (props) => {\n\n    // FPL FETCHING DATA\n    const SiteFetch = SiteFetcher(FplLink, PlayeDataExample)\n    //FPL Data\n    const FplData = SiteFetch.response\n\n    //// SET UPS ////\n    // Array of all points score begins as empty\n    const AllOfThePointsScored = []\n    const AllOfTheAverages = []\n    \n    // For loop logic that pushes points scored of each player\n    // Matches.length is detirmined by number of game weeks \n    // FplData.length is detirmined by the number of Players\n    for (let y=0; y < FplData[0].matches.length; y++) {\n        for (let x=0; x < FplData.length; x++) {\n            const MatchesData = FplData[x].matches[y]\n            // Points are detirmed by which props.type is passed through table\n            // CHANGE THIS FOR OTHER TABLES \n            switch (props.type) {\n                case \"weekly_points\":\n                    // Pushes points scored by each player each game week\n                    AllOfThePointsScored.push(MatchesData.game_week_points);\n                    break;\n                case \"points_total\":  \n                    // Pushes points total of each player, each week\n                    AllOfThePointsScored.push(MatchesData.points_total);\n                    break;\n                case \"team_value\":\n                    // Pushes team value of each player each game week\n                    AllOfThePointsScored.push(MatchesData.team_value);\n                    break;\n                case \"bench_points\":\n                    // Pushes bench points of each player each game week\n                    AllOfThePointsScored.push(Math.floor(MatchesData.bench_points))\n                    break;\n                case \"transfer_points\":\n                    // Pushes bench points of each player each game week\n                    AllOfThePointsScored.push(Math.floor(MatchesData.game_week_transfers_cost))\n                    break;\n                default:\n                    // // Return game week points as default\n                    AllOfThePointsScored.push(MatchesData.points_total);\n            }\n        }\n    }\n    \n    // Average points detirmined by number of players and gameweek\n    for (let i=0; i < AllOfThePointsScored.length; i += FplData.length) {\n        // renders the average of each gameweek and pushes to the array\n        AllOfTheAverages.push(\n            SiteReducer(\n                AllOfThePointsScored.slice(i, i + FplData.length)\n            )\n            / FplData.length\n        )\n    }\n\n    // Total Average  and Sort will be based on value types\n    var TotalsAverage, SortLogic\n\n    // Total of all average of all players\n    switch (props.type) {\n        case \"weekly_points\":\n            // Returns the Average Points Total\n            TotalsAverage = FplData.map(player => \n                player.points_total\n            ).reduce((a, b) => a + b) / FplData.length\n            // Already sorted according to points so can leave as default\n            SortLogic = FplData\n            break;\n        case \"bench_points\":\n            // Returns the Average Bench Points Total\n            TotalsAverage = SiteReducer(\n                    FplData.map(player => SiteReducer(\n                            player.matches.map(match => match.bench_points)\n                        )\n                    )\n                )\n                / FplData.length\n            // sort by who has the most bench points in total\n            SortLogic = FplData.sort((a, b) => {\n\n                const reducer = item => SiteReducer(\n                    item.matches.map(week => week.bench_points)\n                )\n                \n                return reducer(a) - reducer(b)\n            })\n            break\n        case \"team_value\":\n            // sort by highest team value \n            SortLogic = FplData.sort((a, b) => {\n                const valueRender = item => item.matches[b.matches.length - 1].team_value \n                \n                return valueRender(b) - valueRender(a)\n            })\n            break\n        case \"transfer_points\":\n            SortLogic = FplData.sort((a, b) => {\n\n                const WeeksReducer = item => SiteReducer(\n                    item.matches.map((week) => week.game_week_transfers_cost)\n                )\n\n                return WeeksReducer(a) - WeeksReducer(b)\n            })\n\n            TotalsAverage = SiteReducer(\n                    FplData.map(player => \n                        SiteReducer(\n                            player.matches.map(match => match.game_week_transfers_cost)\n                        )\n                    )\n                )\n                / FplData.length\n\n            break;\n        default:\n            // default \n            SortLogic = FplData\n    }\n\n    // Map each player and returns their points per gameweek\n    const PlayerGameWeeks = SortLogic.map((player, index) => {\n\n        // Returns each game week of the player as a Table cell\n        const PlayersWeek = player.matches.map((matchweek, index) => {\n\n            const GameweekAverage = AllOfTheAverages[player.matches.indexOf(matchweek)]\n\n            // Value and Bench detirmines the following varriables\n            // Intitally set as empty\n            var ValueLogic, RatingTypeLogic\n            \n            // Detirmines type of cell\n            switch (props.type) {\n                case \"points_total\":\n                    // returns points total end of matchweek\n                    ValueLogic = matchweek.points_total\n                    break;\n                case \"weekly_points\":\n                    // returns points scored that of matchweek\n                    ValueLogic = matchweek.game_week_points\n                    break\n                case \"team_value\":\n                    // returns team value by the end of matchweek\n                    ValueLogic = matchweek.team_value\n                    break\n                case \"bench_points\":\n                    // returns points scored by players on your bench\n                    ValueLogic = matchweek.bench_points\n                    // If value is higher that average will return bad\n                    // the less points score by bench players the better\n                    RatingTypeLogic = ValueLogic > GameweekAverage ? \"bad\" : \"good\"\n                    break\n                case \"transfer_points\":\n                    ValueLogic = matchweek.game_week_transfers_cost\n                    RatingTypeLogic = ValueLogic > 0 ?\n                        matchweek.game_week_transfers_cost === 4 ? \n                            \"hit\" \n                            : \n                            \"bad\"\n                        :\n                        \"neutral\"        \n                    break\n                default:\n                // default is blank\n            }\n\n            // Rating detirmines color of the cell based comparrison to average \n            const RatingLogic = props.type === \"bench_points\" || props.type === \"transfer_points\" ? \n                // Logic reversed for bench points\n                RatingTypeLogic\n                :\n                // Returns green or red cell depending matchweek point type's comparrison to average\n                TableCellType (ValueLogic, GameweekAverage)\n            \n            // Returns cell and color of cell based on weekly performance and type\n            return (\n                <TablePlayersCell\n                    key={index}\n                    type={props.type}\n                    rating={RatingLogic}\n                    value={ValueLogic}\n                />\n            )\n        })\n        \n        // Total Logic detirmines total of value across the season\n        // Intitally set as empty\n        var TotalsLogic, TotalsRatingLogic\n\n        // Switch will only active for bench points and weekly points\n        switch(props.type) {\n            case \"bench_points\":\n                // Gets players total number of bench points\n                TotalsLogic = SiteReducer(\n                        player.matches.map((matchweek) => matchweek.bench_points)\n                    )\n                // If value is higher that average will return bad\n                // the less points score by bench players the better\n                TotalsRatingLogic = TotalsLogic > TotalsAverage ? \n                    \"bad\" : \"good\"\n                break;\n            case \"weekly_points\":\n                // Gets players total number of points\n                TotalsLogic = player.points_total\n                break\n            case \"transfer_points\":\n                TotalsLogic = SiteReducer(\n                    player.matches.map((matchweek) => matchweek.game_week_transfers_cost)\n                )\n                TotalsRatingLogic = TotalsLogic > TotalsAverage ? \n                    \"bad\" : \"good\"\n                break\n            default:\n                // default is blank\n        }\n\n        // If total of current player is over the average, returns \"good\" or else it returns bad\n        const TotalRatingLogic = props.type === \"bench_points\" || props.type === \"transfer_points\" ?\n            // Logic reversed for bench points\n            TotalsRatingLogic\n            :\n            // Returns green or red cell total in comparrison to average\n            TableCellType(TotalsLogic, TotalsAverage)\n        \n        return (\n            <TablePlayersRow\n                key={index}\n                type={props.type}\n                rank={FplData.indexOf(player) + 1}\n                player_name={player.player_name}\n                game_weeks={PlayersWeek}\n                total_rating={TotalRatingLogic}\n                total_points={TotalsLogic}\n            />\n        )\n    })\n    \n    const TableLogic = (\n        <DisplayTable\n            title={props.title}\n            data={FplData}\n            type={props.type}\n            rows={PlayerGameWeeks}\n            averages={AllOfTheAverages}\n            total_averages={TotalsAverage}\n        />\n    )\n\n    return (\n        <div className=\"table-container\">\n            <SiteRender data={SiteFetch} component={TableLogic} />\n        </div>\n    )\n\n}\n\nexport default PointsTable","import React from 'react'\n// Data\n// Tables\nimport PointsTable from 'Tables/PointsTable'\n\nconst PageData = [\n    {\n        title: \"Weekly Totals\",\n        content: <PointsTable type=\"points_total\" title=\"Weekly Totals\"/>\n    },\n    {\n        title: \"Team value\",\n        content: <PointsTable type=\"team_value\" title=\"Team Value\" />\n    },\n    {\n        title: \"Bench points\",\n        content: <PointsTable type=\"bench_points\" title=\"Bench Points\" />\n    },\n    {\n        title: \"Points on transfers\",\n        content: <PointsTable type=\"transfer_points\" title=\"Transfer Points\" />\n    }\n]\n\n\nexport default PageData","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\n\n\nconst Dropdown = (props) => {\n\n    const Menus = props.dropdown_menus\n\n    const displayedMenus = Menus.map((menu, index) => (\n        <DropdownItem className=\"nav-dropdown-menu-link\" key={index}>\n            <Link to={`/player/${menu}`} className=\"nav-dropdown-menu-link\">\n                {menu}\n            </Link>\n        </DropdownItem>\n    ))\n\n    return (\n        <UncontrolledDropdown>\n            <DropdownToggle nav caret className=\"nav-links\">\n                {props.head_menu}\n            </DropdownToggle>\n            <DropdownMenu inNavbar nav className=\"nav-dropdown-menu\">\n                {displayedMenus}\n            </DropdownMenu>\n        </UncontrolledDropdown>\n    )\n}\n\nexport default Dropdown","import React, { useState, useEffect } from 'react';\nimport { \n    Collapse, \n    Navbar, \n    NavbarToggler, \n    NavbarBrand, \n    Nav, \n    NavItem\n} from 'reactstrap'\nimport PageData from 'Data/PageData';\nimport Dropdown from './Dropdown';\nimport './navbar.css'\nimport {Link} from 'react-router-dom'\nimport PlayerListData from 'Data/PlayerListData';\n\nconst SiteNavbar = (props) => {\n\n    const [playerListData, setplayerListData] = useState(PlayerListData)\n\n    const displayNavs = PageData.map((page, index) => {\n\n        const pageLink = page.title.split(\" \").join(\"-\")\n\n        return (\n            <NavItem key={index}>\n                <Link to={`/fpl_app/${pageLink}`} className=\"nav-links\">\n                    {page.title}\n                </Link>\n            </NavItem>\n        )\n    })\n\n    useEffect(() => {\n        fetch(\"https://kachiis-rest.herokuapp.com/api/fpl_players_refresh\")\n        .then(response => response.json())\n        .then(playerDataFromServer => {\n            setplayerListData(playerDataFromServer)\n        })\n        .catch(err => console.log(err))\n    }, [])\n    \n    const playersList = playerListData.map((player) => player.player_name)\n    \n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n    \n    return (\n        <Navbar color=\"dark\" dark expand=\"md\" className=\"nav-background\">\n            <NavbarBrand href=\"/fpl_app\">Fantasy Premier League Stats</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    {displayNavs}\n                </Nav>\n                <Dropdown head_menu=\"players\" dropdown_menus={playersList}/>\n            </Collapse>\n        </Navbar>\n    );\n}\n\nexport default SiteNavbar;","import React from 'react'\nimport { Tabs } from 'antd';\n\nconst { TabPane } = Tabs;\n\nconst AntdTabs = (props) => {\n\n    const displayTabs = props.data.map((tab, index) => (\n        <TabPane tab={tab.title} key={index}>\n            {tab.content}\n        </TabPane>\n    ))\n\n    return (\n        <Tabs type=\"card\" \n            size=\"large\" \n            centered={true}\n        >\n            {displayTabs}\n        </Tabs>\n    )\n}\nexport default AntdTabs","const SiteLabelRender = (title) => title.split(\"_\").join(\" \").toUpperCase()\n\nexport default SiteLabelRender","import React from 'react'\n// COMPONENTS\nimport SiteLabelRender from 'Tables/TableTools/SiteLabelRender'\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableHead from '@material-ui/core/TableHead';\n\nconst TableHeadings = (props) => {\n\n    // Grabs the key values from a single object \n    const table_headings = Object.keys(props.data[0]).filter(heading => heading !== \"content\").slice(0,3)\n    \n    // Renders the keys for each object \n    const renderHeadings = table_headings.map((heading, index) => {\n\n        const headingLogic = SiteLabelRender(heading)\n        \n        return(\n            <TableCell align=\"center\" key={index}>\n                <b className=\"material-table-heading\">\n                    {headingLogic}\n                </b>\n            </TableCell>\n        )\n    })\n    \n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell align=\"justify\"/>\n                {renderHeadings}\n            </TableRow>\n        </TableHead>\n    )\n}\n\n\nexport default TableHeadings","import React from 'react'\n// Components\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Collapse from '@material-ui/core/Collapse';\n\n// Takes \"content\" as a child property\n// \n// Example: \n//  <CollapseSectionDropdown> \n//      \"This Content\"\n//  </CollapseSectionDropdown>\n\nconst CollapseSectionDropdown = (props) => ( \n    <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n            <Collapse in={props.open} timeout=\"auto\" unmountOnExit>\n                <div className=\"material-ui-content-container\">\n                    {props.content}\n                </div>\n            </Collapse>\n        </TableCell>\n    </TableRow>\n)\n\nexport default CollapseSectionDropdown\n","import React, { useState } from 'react';\n// Components\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport TableCollapsableRow from './TableCollapsableRow';\n\n\nconst TableSingleRow = (props) => {\n    \n    const rowContent = Object.keys(props.row).filter(heading => heading !== \"content\").slice(0,3)\n\n    // By default rows are closed and content is hidden\n    const [open, setOpen] = useState(false)\n\n    // When clicked open Logic with toggle \n    const openLogic = () => setOpen(!open)\n\n    // Returns a table cell for each value in object until cropped\n    const displayedTableCells = rowContent.map((attribute, index) => (\n            <TableCell align=\"center\" key={index}>\n                {props.row[attribute]}\n            </TableCell>\n        )\n    )\n\n    const arrowLogic = open ? \n        <KeyboardArrowDownIcon /> \n        : \n        <ChevronRightIcon />\n\n\n    const dropDownLogic = () => {\n        if (props.content) {\n            return (\n                <IconButton \n                    key={props.index} \n                    aria-label=\"expand row\" \n                    size=\"small\" \n                    onClick={openLogic}\n                >\n                    {arrowLogic}\n                </IconButton>\n            )\n        }\n    }\n\n    return (\n        <>\n            <TableRow>\n                <TableCell>\n                    {dropDownLogic()}\n                </TableCell>\n                {displayedTableCells}\n            </TableRow>\n            <TableCollapsableRow\n                open={open}\n                content={props.content}\n            />\n        </>\n    )\n\n}\n\nexport default TableSingleRow","import React, {Fragment} from 'react';\n// Components\nimport TableBody from '@material-ui/core/TableBody';\nimport TableSingleRow from './TableSingleRow'\n\n\nconst TableContentRow = (props) => {\n\n    // Takes Data and renders a single row for each\n    const renderDataList = props.data.map((row, index) => {\n\n        return (\n            <TableSingleRow \n                key={index}\n                index={index} \n                row={row}\n                content={row.content}\n            />\n        )\n    })\n\n    return (\n        <TableBody>\n            <Fragment>    \n                {renderDataList}\n            </Fragment>\n        </TableBody>  \n    )\n}\n\n\nexport default TableContentRow","import React from 'react'\n// CSS\nimport './MaterialUITable.css'\n// Material UI Table\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\n// My Components\nimport TableHeadings from './TableContents/TableHeadings';\nimport TableContents from './TableContents/TableContents';\n\nconst MaterialUITable = (props) => (\n\n    <div className=\"w-80 material-table\">\n        <TableContainer component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                {/* TABLE HEADINGS */}\n                <TableHeadings \n                    data={props.data} \n                />\n                {/* TABLE Contents */}\n                <TableContents \n                    data={props.data} \n                />\n            </Table>\n        </TableContainer>\n    </div>\n\n)\n\nexport default MaterialUITable","import React from 'react'\n// CSS\n\n// COMPONENTS\nimport { Card } from 'antd';\n\nconst AntdCard = (props) => {\n\n    const { Meta } = Card;\n\n    const spanLogic = props.span ? props.span : 3\n    const widthLogic = props.width ? props.width: 90\n\n    return (\n        <Card className={`site-span-${spanLogic} w-${widthLogic} player-summary-card`}>\n            <Meta title={`${props.title}:`}\n                description={props.description}\n            />\n        </Card>\n    )\n}\n\nexport default AntdCard","// import react from 'react'\nimport SiteLabelRender from 'Tables/TableTools/SiteLabelRender';\nimport MaterialUiTable from 'Components/MaterialUiTable'\nimport AntdCard from 'Components/AntdCard';\n\nconst DetailTables = (props) => {\n\n    const tableData = props.data.matches.map((match) => {\n\n        const matchCards = Object.keys(match).filter(match => match !== \"content\")\n\n        const displayedContent = matchCards.map((card) => {\n\n            const descriptionLogic = () => {\n                if (match[card] === 0) {\n                    return \"0\"\n                }\n                else if (card === \"team_value\") {\n                    return `£${match[card]/ 10}M`\n                }\n                return match[card]\n            }\n\n            return (\n                <AntdCard \n                    className=\"text-center\"\n                    title={`${ SiteLabelRender(card)}`}\n                    description={descriptionLogic()}\n                />\n            )\n        })\n\n        match.content = (\n            <div className=\"site-grid-system detail-table\">\n                {displayedContent}\n            </div>\n        )\n\n        return match\n    })\n    \n    return <MaterialUiTable data={tableData} />\n\n}\n\nexport default DetailTables","import React from 'react'\nimport SiteLabelRender from 'Tables/TableTools/SiteLabelRender';\n// CSS\nimport 'PlayerDetail/PlayerDetail.css'\nimport AntdCard from 'Components/AntdCard';\n\nconst SumamryTable = (props) => {\n\n    const summaryHeadings = {\n        player_id:  props.data.player_id,\n        total_points: props.data.points_total,\n        team_value: props.data.team_value / 10,\n        total_transfers: props.data.transfers_total,\n    }\n\n    const labelsList = Object.keys(summaryHeadings)\n\n    const displayDecription = labelsList.map((label) => {\n\n        var labelName, labelDescription\n\n        switch(label) {\n            case \"total_transfers\":\n                labelName = \"TRANSFERS\"\n                labelDescription = (\n                    <div className=\"labels-description-box\">\n                        <h5>{props.data.transfers_total}</h5>\n                        <p><b>Points Spent On Transfers: </b>{props.data.points_on_transfers}</p>\n                    </div>\n                )\n                break\n            case \"total_points\":\n                labelName = \"TOTAL POINTS\"\n                labelDescription = (\n                    <>\n                        <h5>{summaryHeadings[label]}</h5>\n                        <p><b>Last GW ({props.data.current_gameweek})</b>: {props.data.last_gameweek_points} points</p>\n                    </>\n                )\n                break\n            case \"team_value\":\n                labelName = \"TEAM VALUE\"\n                labelDescription = <h4>£{summaryHeadings[label]}M</h4>\n                break\n            default:\n                labelName = SiteLabelRender(label)\n                labelDescription = <h4>{summaryHeadings[label]}</h4>\n        }\n \n        return (\n            <AntdCard title={`${labelName}:`}\n                description={labelDescription}\n            />\n        )\n    })\n\n    return (\n        <div className=\"w-90 m-auto site-grid-system detail-table\">\n            {displayDecription}\n        </div>\n    )\n}\n\nexport default SumamryTable","import React from 'react'\n// COMPONENTS\nimport SiteLabelRender from 'Tables/TableTools/SiteLabelRender';\nimport AntdCard from 'Components/AntdCard';\n\n\nconst ChipTables = (props) => {\n\n    const displayChips = props.data.map((chip) => {\n\n        const descriptionLogic = (\n            <div>\n                <h6>Matchday: {chip.chip_matchday}</h6>\n                <p>Date Used: {chip.chip_date}</p>\n            </div>\n        )\n\n        return (\n            <AntdCard \n                width={80}\n                span={\"4\"}\n                className=\"text-center\"\n                title={`${ SiteLabelRender(chip.chip_name)}`}\n                description={descriptionLogic}\n            />\n        )\n    })\n\n    const filteredCards =  props.data.length === 5 ? \"None\" : 5 - props.data.length\n\n    const summary_card = (\n        <div>\n            <h3>{filteredCards}</h3>\n        </div>\n    )\n\n    return (\n        <div className=\"site-grid-system detail-table\">\n            <AntdCard \n                width={80}\n                span={4}\n                title=\"Chips Remaining\"\n                description={summary_card}\n            />\n            {displayChips}\n        </div>\n    )\n}\n\nexport default ChipTables","import React from 'react'\n// COMPONENTS\nimport AntdTabs from 'Components/AntdTabs'\nimport DetailTables from './DetailTables/DetailTables'\nimport SumamryTable from './DetailTables/SummaryTable'\nimport ChipsTable from './DetailTables/ChipTables'\n\n\nconst PlayerDetail = (props) => {\n\n    const pageContent = [\n        {\n            title: \"Summary\",\n            content: <SumamryTable title=\"Summary\" data={props.data}/>\n        },\n        {\n            title: \"Detailed\",\n            content: <DetailTables title=\"Detailed Table\" data={props.data} />\n        },\n        {\n            title: \"Chips\",\n            content: <ChipsTable data={props.data.chips} />\n        }  \n    ]\n\n    return (\n        <>\n            <h2>{props.data.player_name}</h2>\n            <h4>{props.data.team_name}</h4>\n            <AntdTabs data={pageContent} />\n        </>\n    )\n}\n\nexport default PlayerDetail ","import React, { useEffect, useState } from 'react'\n// CSS\nimport './App.css';\nimport './table.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'antd/dist/antd.css';\n// Components\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport SiteNavbar from './Components/SiteNavbar'\nimport PointsTable from './Tables/PointsTable';\n// Data\nimport PageData from 'Data/PageData';\nimport PlayerListData from 'Data/PlayerListData'\n// import PlayerDetailTable from './PlayerDetail/PlayerDetailTable';\nimport PlayerDetail from './PlayerDetail';\n\n\nconst App = () => {\n\n  const [playerListData, setplayerListData] = useState(PlayerListData)\n\n  useEffect(() => {\n    fetch(\"https://kachiis-rest.herokuapp.com/api/fpl_players/\")\n    .then(response => response.json())\n    .then(playerDataFromServer => {\n          setplayerListData(playerDataFromServer)\n        })\n        .catch(err => console.log(err))\n    },[])\n  \n  const displayPages = PageData.map((page, index) => {\n    const pageLink = page.title.split(\" \").join(\"-\")\n    return (\n      <Route path={`/fpl_app/${pageLink}`} key={index}>\n        {page.content}\n      </Route>\n    )\n  })\n\n  const displayPlayerPages = playerListData.map((player, index) => (\n      <Route path={`/player/${player.player_name}`} key={index}>\n        <PlayerDetail data={player}/>\n      </Route>\n  ))\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <SiteNavbar />\n        <main>\n          <Switch>\n            {displayPages}\n            {displayPlayerPages}\n            <Route path=\"/\">\n              <PointsTable title=\"Weekly Points\" type=\"weekly_points\" />\n            </Route>\n          </Switch>\n        </main>\n      </BrowserRouter>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}